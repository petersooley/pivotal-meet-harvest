// Generated by CoffeeScript 1.3.3
(function() {
  var App, Harvest, Pivotal, app;

  Pivotal = (function() {

    function Pivotal(user, pass) {
      var self;
      this.url = 'https://www.pivotaltracker.com/services/v3/';
      self = this;
      $.ajax({
        url: this.url + 'tokens/active',
        type: 'POST',
        async: false,
        data: {
          username: user,
          password: pass
        },
        success: function(data) {
          var $guid;
          $guid = $(data).find('guid');
          return self.token = $guid.text();
        },
        error: function(xhr, status, error) {
          throw Error('Pivotal Tracker login failure.');
        }
      });
    }

    Pivotal.prototype.getAllProjects = function() {
      var data, id, name, project, projects, _i, _len, _ref;
      data = this.HTTP('GET', 'projects', null);
      projects = [];
      _ref = $(data).find('project');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        project = _ref[_i];
        name = $(project).find('name').first().text();
        id = $(project).find('id').first().text();
        projects.push({
          name: name,
          id: id
        });
      }
      return projects;
    };

    Pivotal.prototype.HTTP = function(method, path, data) {
      var returnData;
      returnData = false;
      $.ajax({
        url: this.url + path,
        type: method,
        async: false,
        data: data,
        headers: {
          'X-TrackerToken': this.token
        },
        success: function(data) {
          return returnData = data;
        },
        error: function() {
          return returnData = false;
        }
      });
      return returnData;
    };

    return Pivotal;

  })();

  Harvest = (function() {

    function Harvest(user, pass, subdomain) {
      var result;
      this.user = user;
      this.pass = pass;
      this.subdomain = subdomain;
      result = this.HTTP('account/who_am_i');
      if (result === false) {
        throw Error('Harvest login failure.');
      }
    }

    Harvest.prototype.getAllProjects = function() {
      var code, data, id, name, project, projects, _i, _len, _ref;
      data = this.HTTP('projects');
      projects = [];
      _ref = $(data).find('project');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        project = _ref[_i];
        name = $(project).find('name').text();
        id = $(project).find('id').text();
        code = $(project).find('code').text();
        projects.push({
          name: name,
          id: id,
          code: code
        });
      }
      return projects;
    };

    Harvest.prototype.HTTP = function(path) {
      var returnData;
      returnData = {};
      $.ajax({
        url: 'https://' + this.subdomain + '.harvestapp.com/' + path,
        type: 'GET',
        async: false,
        headers: {
          'Content-Type': 'application/xml',
          'Accept': 'application/xml',
          'Authorization': 'Basic ' + Base64.encode(this.user + ':' + this.pass)
        },
        success: function(data, status) {
          return returnData = data;
        },
        error: function(xhr, status, error) {
          return returnData = false;
        }
      });
      return returnData;
    };

    return Harvest;

  })();

  App = (function() {

    function App() {
      var _this = this;
      this.pivotal = {};
      this.harvest = {};
      chrome.extension.onMessage.addListener(function(request, sender, sendResponse) {
        var error;
        error = {};
        error.messages = [];
        switch (request.method) {
          case 'login':
            if (_this.login(sendResponse, error)) {
              return true;
            }
            break;
          case 'downloadProjects':
            if (_this.downloadProjects(sendResponse, error)) {
              return true;
            }
            break;
          case 'getProjects':
            if (_this.getProjects(sendResponse, error)) {
              return true;
            }
            break;
          case 'getProjectPair':
            if (_this.getProjectPair(request.pivotalId, sendResponse, error)) {
              return true;
            }
            break;
          default:
            error.messages.push("Unrecognized request method in sendMessage call.");
        }
        sendResponse({
          error: error
        });
        return true;
      });
    }

    App.prototype.login = function(sendResponse, error) {
      var hPass, hSubdomain, hUser, harvestError, pPass, pUser, pivotalError;
      pUser = localStorage['pivotal_username'];
      pPass = localStorage['pivotal_password'];
      hUser = localStorage['harvest_username'];
      hPass = localStorage['harvest_password'];
      hSubdomain = localStorage['harvest_subdomain'];
      pivotalError = null;
      harvestError = null;
      if ((pUser != null) && (pPass != null) && (hUser != null) && (hPass != null)) {
        try {
          this.pivotal = new Pivotal(pUser, pPass);
        } catch (e) {
          error.messages.push(e.message);
        }
        try {
          this.harvest = new Harvest(hUser, hPass, hSubdomain);
        } catch (e) {
          error.messages.push(e.message);
        }
        if (error.messages.length === 0) {
          sendResponse({
            success: true
          });
          return true;
        }
      } else {
        error.messages.push("Missing login information. See options page.");
      }
      return false;
    };

    App.prototype.downloadProjects = function(sendResponse, error) {
      var harvestProjects, pivotalProjects;
      pivotalProjects = this.pivotal.getAllProjects();
      harvestProjects = this.harvest.getAllProjects();
      sendResponse({
        pivotal: pivotalProjects,
        harvest: harvestProjects
      });
      return true;
    };

    App.prototype.getProjectPair = function(pivotalId, sendResponse, error) {
      var hProj, harvestId, harvestProjects, map, mapping, pProj, pivotalProjects, _i, _len;
      if (localStorage['project_mapping'] != null) {
        mapping = JSON.parse(localStorage['project_mapping']);
        for (_i = 0, _len = mapping.length; _i < _len; _i++) {
          map = mapping[_i];
          if ('' + map.pivotal === '' + pivotalId) {
            harvestId = map.harvest;
            harvestProjects = this.harvest.getAllProjects();
            pivotalProjects = this.pivotal.getAllProjects();
            hProj = this.findProject(harvestId, harvestProjects);
            pProj = this.findProject(pivotalId, pivotalProjects);
            if (hProj) {
              sendResponse({
                harvestProject: hProj,
                pivotalProject: pProj
              });
              return true;
            }
          }
        }
      }
      error.messages.push("Could not find that project.");
      return false;
    };

    App.prototype.getProjects = function(sendResponse, error) {
      var hProj, harvestProjects, map, mapping, pProj, pivotalProjects, projects, _i, _len;
      if (localStorage['project_mapping'] != null) {
        mapping = JSON.parse(localStorage['project_mapping']);
        pivotalProjects = this.pivotal.getAllProjects();
        harvestProjects = this.harvest.getAllProjects();
        projects = [];
        for (_i = 0, _len = mapping.length; _i < _len; _i++) {
          map = mapping[_i];
          pProj = this.findProject(map.pivotal, pivotalProjects);
          hProj = this.findProject(map.harvest, harvestProjects);
          projects.push({
            pivotalId: pProj.id,
            pivotalName: pProj.name,
            harvestId: hProj.id,
            harevestName: hProj.name,
            harevestCode: hProj.code
          });
        }
        sendResponse({
          projects: projects
        });
        return true;
      } else {
        error.messages.push("No projects mapped yet. See options page.");
        return false;
      }
    };

    App.prototype.findProject = function(id, projects) {
      var proj, _i, _len;
      for (_i = 0, _len = projects.length; _i < _len; _i++) {
        proj = projects[_i];
        if ('' + proj.id === '' + id) {
          return proj;
        }
      }
    };

    return App;

  })();

  app = new App();

}).call(this);
