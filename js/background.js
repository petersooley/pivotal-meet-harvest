// Generated by CoffeeScript 1.6.2
(function() {
  var App, app;

  App = (function() {
    function App() {
      var _this = this;

      this.entries = [];
      chrome.extension.onMessage.addListener(function(request, sender, sendResponse) {
        var error;

        error = {};
        error.messages = [];
        switch (request.method) {
          case 'login':
            if (_this.login(request, sendResponse, error)) {
              return true;
            }
            break;
          case 'toggle':
            if (_this.toggle(request, sendResponse, error)) {
              return true;
            }
            break;
          case 'get':
            if (_this.get(request, sendResponse, error)) {
              return true;
            }
            break;
          case 'edit':
            if (_this.edit(request, sendResponse, error)) {
              return true;
            }
            break;
          case 'downloadProjects':
            if (_this.downloadProjects(sendResponse, error)) {
              return true;
            }
            break;
          default:
            error.messages.push("Unrecognized request method in sendMessage call.");
        }
        sendResponse({
          error: error
        });
        return true;
      });
    }

    App.prototype.toggle = function(data, sendResponse, error) {
      var e, entryId, isStarted, _i, _len, _ref;

      return true;
      _ref = this.entries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if (e.storyId === data.storyId) {
          entryId = e.entryId;
          break;
        }
      }
      if (entryId == null) {
        entryId = this.harvestAPI.createEntry(this.harvestProjectId, data.description, 0, data.taskId);
        this.entries.push({
          entryId: entryId
        });
      }
      isStarted = this.harvestAPI.toggleEntry(entryId);
      sendResponse({
        isStarted: isStarted
      });
      return true;
    };

    App.prototype.get = function(data, sendResponse, error) {
      var e, entry, _i, _len, _ref;

      _ref = this.entries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if (e.storyId === data.storyId) {
          entry = this.harvestAPI.getEntry(e.entryId);
          sendResponse(entry);
          return true;
        }
      }
    };

    App.prototype.edit = function(data, sendResponse, error) {
      var e, entryId, _i, _len, _ref;

      _ref = this.entries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if (e.storyId === data.storyId) {
          entryId = e.entryId;
          break;
        }
      }
      if (entryId == null) {
        entryId = this.harvestAPI.createEntry(this.harvestProjectId, data.description, data.hours, data.taskId);
        this.entries.push({
          entryId: entryId
        });
      } else {
        this.harvestAPI.editEntry(entryId, data.description, data.hours, data.taskId);
      }
      return sendResponse({
        success: true
      });
    };

    App.prototype.login = function(data, sendResponse, error) {
      var entry, map, result, stories, story, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;

      this.pivotalProjectId = data.projectId;
      this.harvestProjectId = false;
      _ref = JSON.parse(localStorage['project_mapping']);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        map = _ref[_i];
        if (map.pivotal + '' === this.pivotalProjectId + '') {
          this.harvestProjectId = map.harvest;
          break;
        }
      }
      if (!this.harvestProjectId) {
        error.messages.push("This project is not mapped to a Harvest project. See options page.");
        return false;
      }
      if (this.loginToAPIs(error)) {
        result = this.harvestAPI.getTodaysEntriesAndTasks(this.harvestProjectId);
        stories = this.pivotalAPI.getStories(this.pivotalProjectId);
        _ref1 = result.entries;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          entry = _ref1[_j];
          for (_k = 0, _len2 = stories.length; _k < _len2; _k++) {
            story = stories[_k];
            if (entry.notes === story.name) {
              entry.storyId = story.id;
              this.entries.push(entry);
            }
          }
        }
        sendResponse({
          html: this.getHtml(),
          tasks: result.tasks
        });
        return true;
      }
      return false;
    };

    App.prototype.downloadProjects = function(sendResponse, error) {
      var harvestProjects, pivotalProjects;

      if (!this.loginToAPIs(error)) {
        return false;
      }
      pivotalProjects = this.pivotalAPI.getProjects();
      harvestProjects = this.harvestAPI.getProjects();
      sendResponse({
        pivotal: pivotalProjects,
        harvest: harvestProjects
      });
      return true;
    };

    App.prototype.loginToAPIs = function(error) {
      var e, hPass, hSubdomain, hUser, pPass, pUser;

      pUser = localStorage['pivotal_username'];
      pPass = localStorage['pivotal_password'];
      hUser = localStorage['harvest_username'];
      hPass = localStorage['harvest_password'];
      hSubdomain = localStorage['harvest_subdomain'];
      if ((hUser != null) && (hPass != null) && (hSubdomain != null) && (pUser != null) && (pPass != null)) {
        try {
          this.pivotalAPI = new PivotalAPI(pUser, pPass);
        } catch (_error) {
          e = _error;
          error.messages.push(e.message);
        }
        try {
          this.harvestAPI = new HarvestAPI(hUser, hPass, hSubdomain);
        } catch (_error) {
          e = _error;
          error.messages.push(e.message);
        }
        if (error.messages.length !== 0) {
          error.messages.push("Missing login information. See options page.");
          return false;
        }
        return true;
      }
      return false;
    };

    App.prototype.getHtml = function(error) {
      var returnData;

      returnData = {};
      $.ajax({
        url: chrome.extension.getURL('html/timers.html'),
        dataType: 'html',
        async: false,
        success: function(data) {
          return returnData = data;
        }
      });
      return returnData;
    };

    return App;

  })();

  app = new App();

}).call(this);
