// Generated by CoffeeScript 1.3.3
(function() {
  var App, HarvestAPI, PivotalAPI, app;

  PivotalAPI = (function() {

    function PivotalAPI(user, pass) {
      var self;
      this.url = 'https://www.pivotaltracker.com/services/v3/';
      self = this;
      $.ajax({
        url: this.url + 'tokens/active',
        type: 'POST',
        async: false,
        data: {
          username: user,
          password: pass
        },
        success: function(data) {
          var $guid;
          $guid = $(data).find('guid');
          return self.token = $guid.text();
        },
        error: function(xhr, status, error) {
          throw Error('There was a problem logging in to the Pivotal Tracker API. See options page.');
        }
      });
    }

    PivotalAPI.prototype.getAllProjects = function() {
      var data, id, name, project, projects, _i, _len, _ref;
      data = this.HTTP('GET', 'projects', null);
      projects = [];
      _ref = $(data).find('project');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        project = _ref[_i];
        name = $(project).find('name').first().text();
        id = $(project).find('id').first().text();
        projects.push({
          name: name,
          id: id
        });
      }
      return projects;
    };

    PivotalAPI.prototype.HTTP = function(method, path, data) {
      var returnData;
      returnData = false;
      $.ajax({
        url: this.url + path,
        type: method,
        async: false,
        data: data,
        headers: {
          'X-TrackerToken': this.token
        },
        success: function(data) {
          return returnData = data;
        },
        error: function() {
          return returnData = false;
        }
      });
      return returnData;
    };

    return PivotalAPI;

  })();

  HarvestAPI = (function() {

    function HarvestAPI(user, pass, subdomain) {
      var result;
      this.user = user;
      this.pass = pass;
      this.subdomain = subdomain;
      result = this.HTTP('account/who_am_i');
      if (result === false) {
        throw Error('There was a problem logging in to the Harvest API. See options page.');
      }
    }

    HarvestAPI.prototype.getAllProjects = function() {
      var code, data, id, name, project, projects, _i, _len, _ref;
      data = this.GET('projects');
      projects = [];
      _ref = $(data).find('project');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        project = _ref[_i];
        name = $(project).find('name').text();
        id = $(project).find('id').text();
        code = $(project).find('code').text();
        projects.push({
          name: name,
          id: id,
          code: code
        });
      }
      return projects;
    };

    HarvestAPI.prototype.createEntry = function(harvestProjectId, notes, hours, taskId) {};

    HarvestAPI.prototype.toggleEntry = function(harvestProjectId, entryId) {};

    HarvestAPI.prototype.getEntry = function(harvestProjectId, entryid) {};

    HarvestAPI.prototype.editEntry = function(harvestProjectId, entryId, notes, hours, taskId) {};

    HarvestAPI.prototype.GET = function(path) {
      return this.HTTP('GET', path, null);
    };

    HarvestAPI.prototype.POST = function(path, data) {
      return this.HTTP('POST', path, data);
    };

    HarvestAPI.prototype.HTTP = function(method, path, data) {
      var returnData;
      returnData = {};
      $.ajax({
        url: 'https://' + this.subdomain + '.harvestapp.com/' + path,
        type: method,
        data: data,
        async: false,
        headers: {
          'Content-Type': 'application/xml',
          'Accept': 'application/xml',
          'Authorization': 'Basic ' + Base64.encode(this.user + ':' + this.pass)
        },
        success: function(data, status) {
          return returnData = data;
        },
        error: function(xhr, status, error) {
          return returnData = false;
        }
      });
      return returnData;
    };

    return HarvestAPI;

  })();

  App = (function() {

    function App() {
      var _this = this;
      this.entries = [];
      chrome.extension.onMessage.addListener(function(request, sender, sendResponse) {
        var error;
        error = {};
        error.messages = [];
        switch (request.method) {
          case 'login':
            if (_this.login(request, sendResponse, error)) {
              return true;
            }
            break;
          case 'toggle':
            if (_this.toggle(request, sendResponse, error)) {
              return true;
            }
            break;
          case 'get':
            if (_this.get(request, sendResponse, error)) {
              return true;
            }
            break;
          case 'edit':
            if (_this.edit(request, sendResponse, error)) {
              return true;
            }
            break;
          default:
            error.messages.push("Unrecognized request method in sendMessage call.");
        }
        sendResponse({
          error: error
        });
        return true;
      });
    }

    App.prototype.toggle = function(data, sendResponse, error) {
      var e, entryId, isStarted, _i, _len, _ref;
      return true;
      _ref = this.entries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if (e.storyId === data.storyId) {
          entryId = e.entryId;
          break;
        }
      }
      if (!(entryId != null)) {
        entryId = this.harvestAPI.createEntry(this.harvestProjectId, data.description, 0, data.taskId);
        this.entries.push(entryId);
      }
      isStarted = this.harvestAPI.toggleEntry(this.harvestProjectId, entryId);
      sendResponse({
        isStarted: isStarted
      });
      return true;
    };

    App.prototype.get = function(data, sendResponse, error) {
      var e, entry, _i, _len, _ref;
      _ref = this.entries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if (e.storyId === data.storyId) {
          entry = this.harvestAPI.getEntry(this.harvestProjectId, e.entryId);
          sendResponse(entry);
          return true;
        }
      }
    };

    App.prototype.edit = function(data, sendResponse, error) {
      var e, entryId, _i, _len, _ref;
      _ref = this.entries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if (e.storyId === data.storyId) {
          entryId = e.entryId;
          break;
        }
      }
      if (!(entryId != null)) {
        entryId = this.harvestAPI.createEntry(this.harvestProjectId, data.description, data.hours, data.taskId);
        this.entries.push(entryId);
      } else {
        this.harvestAPI.editEntry(this.harvestProjectId, entryId, data.description, data.hours, data.taskId);
      }
      return sendResponse({
        success: true
      });
    };

    App.prototype.login = function(data, sendResponse, error) {
      var hPass, hSubdomain, hUser, map, _i, _len, _ref;
      hUser = localStorage['harvest_username'];
      hPass = localStorage['harvest_password'];
      hSubdomain = localStorage['harvest_subdomain'];
      this.pivotalProjectId = data.projectId;
      this.harvestProjectId = false;
      _ref = JSON.parse(localStorage['project_mapping']);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        map = _ref[_i];
        console.log(map);
        if (map.pivotal + '' === this.pivotalProjectId + '') {
          this.harvestProjectId = map.harvest;
          break;
        }
      }
      if (!this.harvestProjectId) {
        error.messages.push("This project is not mapped to a Harvest project. See options page.");
        return false;
      }
      if ((hUser != null) && (hPass != null) && (hSubdomain != null)) {
        try {
          this.harvestAPI = new HarvestAPI(hUser, hPass, hSubdomain);
        } catch (e) {
          error.messages.push(e.message);
        }
        if (error.messages.length === 0) {
          this.getHtml(sendResponse, error);
          return true;
        }
      } else {
        error.messages.push("Missing login information. See options page.");
      }
      return false;
    };

    App.prototype.getHtml = function(sendResponse, error) {
      $.ajax({
        url: chrome.extension.getURL('html/timers.html'),
        dataType: 'html',
        success: sendResponse,
        error: function() {
          error.messages.push("Couldn't find html/timers.html");
          return sendResponse({
            error: error
          });
        }
      });
      return true;
    };

    return App;

  })();

  app = new App();

}).call(this);
