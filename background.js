// Generated by CoffeeScript 1.3.3
(function() {
  var Harvest, Pivotal;

  Pivotal = (function() {

    function Pivotal(user, pass) {
      var self;
      self = this;
      $.post('https://www.pivotaltracker.com/services/v3/tokens/active', {
        username: user,
        password: pass
      }, function(data, status) {
        var $guid;
        $guid = $(data).find('guid');
        return self.token = $guid.text();
      });
    }

    return Pivotal;

  })();

  Harvest = (function() {

    function Harvest(user, pass, subdomain) {
      this.user = user;
      this.pass = pass;
      this.subdomain = subdomain;
      this.POST('daily');
    }

    Harvest.prototype.POST = function(path) {
      console.log('posting to ' + 'https://' + this.subdomain + '.harvestapp.com/' + path);
      console.log('Basic ' + Base64.encode(this.user + ':' + this.pass));
      return $.ajax({
        url: 'https://' + this.subdomain + '.harvestapp.com/' + path,
        type: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': 'Basic ' + Base64.encode(this.user + ':' + this.pass)
        },
        success: function(data) {
          return console.log(data);
        },
        error: function(xhr, text, errorThrown) {
          console.log('error');
          console.log(text);
          return console.log(errorThrown);
        }
      });
    };

    return Harvest;

  })();

  chrome.extension.onMessage.addListener(function(request, sender, sendResponse) {
    var hPass, hSubdomain, hUser, p, pPass, pUser, u;
    switch (request.method) {
      case 'login':
        pUser = localStorage['pivotal_username'];
        pPass = localStorage['pivotal_password'];
        hUser = localStorage['harvest_username'];
        hPass = localStorage['harvest_password'];
        hSubdomain = localStorage['harvest_subdomain'];
        if ((pUser != null) && (pPass != null) && (hUser != null) && (hPass != null)) {
          console.log('logging in');
          p = new Pivotal(pUser, pPass);
          return u = new Harvest(hUser, hPass, hSubdomain);
        } else {
          return sendResponse({
            error: true
          });
        }
        break;
      default:
        return sendResponse({});
    }
  });

}).call(this);
